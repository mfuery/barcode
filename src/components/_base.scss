// Primary Colors
$benefit-pink: #ff7380;
$pink: #fa3468;
$white: #fff;

// Global textual link color.
$link-color: $pink;

// Link hover color set via `darken()` function.
$link-hover-color: darken($link-color, 15%);

// Font family stack declarations.
$sans-serif-font-family: "Proxima Nova", Helvetica, Arial, sans-serif;
$script-font-family: "Sign Painter Script", cursive;

$base-font-size: 16px;
$base-font-size-button: 26px;
$base-font-weight: 400;
$base-line-height: 1.4;
$base-line-height-button: 64px;

@mixin border-radius($radius) {
  border-radius: $radius;
}

// Font-smoothing.
@mixin font-smoothing($value: on) {
  @if $value == on {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
  @else {
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
  }
}

// Script mixin
@mixin script-font {
  font-family: $script-font-family;
  letter-spacing: 0;
  font-variant-ligatures: common-ligatures;
  font-weight: 400;
  @include font-smoothing(on);
}

/// Replace `$search` with `$replace` in `$string`
/// @author Hugo Giraudel
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

//
//  Function to create an optimized svg url
//
@function svg-url($svg){
  //
  //  Chunk up string in order to avoid
  //  "stack level too deep" error
  //
  $encoded:'';
  $slice: 2000;
  $index: 0;
  $loops: ceil(str-length($svg)/$slice);
  @for $i from 1 through $loops {
    $chunk: str-slice($svg, $index, $index + $slice - 1);
    //
    //   Encode (may need a few extra replacements)
    //
    $chunk: str-replace($chunk, '"', '\'');
    $chunk: str-replace($chunk, ' ', '%20');
    $chunk: str-replace($chunk, '<', '%3C');
    $chunk: str-replace($chunk, '>', '%3E');
    $chunk: str-replace($chunk, '&', '%26');
    $chunk: str-replace($chunk, '#', '%23');
    $encoded: #{$encoded}#{$chunk};
    $index: $index + $slice;
  }
  @return url("data:image/svg+xml;charset=utf8,#{$encoded}");
}

